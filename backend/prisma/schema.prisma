generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  name              String
  password          String
  contactNo         String
  address           String?
  profileImageUrl   String?
  verified          Boolean        @default(false)
  verificationToken String?
  tokenExpiresAt    DateTime?
  notifications     Notification[]
  comments          Comment[]
  reviews           Review[] 
  tickets           Ticket[]       @relation("UserTickets")
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

enum ServiceProviderMode {
  offline
  online
}

model ServiceProvider {
  id                String              @id @default(uuid())
  email             String              @unique
  name              String
  password          String
  contactNo         String              @unique
  mode              ServiceProviderMode @default(offline)
  profileImageUrl   String?
  verified          Boolean             @default(false)
  verificationToken String?
  tokenExpiresAt    DateTime?
  services          Service[]           @relation("ProviderServices")
  comments          Comment[]
  reviews           Review[] 
  notifications     Notification[]      @relation("ProviderNotifications") 
  ownedNotifications Notification[]      @relation("ServiceOwnerNotifications") 
  tickets           Ticket[]            @relation("ProviderTickets")
  ownedServiceTickets Ticket[]          @relation("ServiceOwnerTickets")  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Service {
  id          String           @id @default(uuid())
  providerId  String
  serviceType String
  name        String
  description String?
  price       Float
  timing      String
  category    String
  images      String[]
  latitude    Float
  longitude   Float
  contactNo   String
  availability String  @default("yes")
  reviewCount Int  @default(0)
  reviews     Review[]
  rating      Float            @default(0)
  tickets     Ticket[]         @relation("ServiceTickets")
  provider    ServiceProvider? @relation("ProviderServices", fields: [providerId], references: [id])
  comments    Comment[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Ticket {
  id                   Int             @id @default(autoincrement())
  userId               String?
  providerId           String?
  serviceId            String
  serviceownedId       String
  status               TicketStatus
  time                 String
  date                 DateTime
  role                 String
  notificationId       String?         @unique
  notification         Notification?
  cancellationReason    String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  user                 User?            @relation("UserTickets", fields: [userId], references: [id])
  provider             ServiceProvider? @relation("ProviderTickets", fields: [providerId], references: [id])
  service              Service          @relation("ServiceTickets", fields: [serviceId], references: [id])
  serviceOwner         ServiceProvider   @relation("ServiceOwnerTickets", fields: [serviceownedId], references: [id])
  reviews              Review[]         @relation("TicketToReviews")
}

enum TicketStatus {
  pending
  working
  cancel
  rejected
  done
}

model Review {
  id          Int              @id @default(autoincrement())
  ticketId    Int
  ticket      Ticket           @relation("TicketToReviews", fields: [ticketId], references: [id], onDelete: Cascade)
  serviceId   String           
  service     Service          @relation(fields: [serviceId], references: [id])
  userId      String?          
  user        User?            @relation(fields: [userId], references: [id]) 
  providerId  String?          
  provider    ServiceProvider?  @relation(fields: [providerId], references: [id]) 
  rating      Float
  comment     String?
  createdAt   DateTime         @default(now())
}
model Comment {
  id         String           @id @default(uuid())
  content    String
  userId     String?
  providerId String?
  serviceId  String?
  replies    Comment[]        @relation("CommentReplies")
  parent     Comment?         @relation("CommentReplies", fields: [parentId], references: [id])
  parentId   String?
  user       User?            @relation(fields: [userId], references: [id])
  provider   ServiceProvider? @relation(fields: [providerId], references: [id])
  service    Service?         @relation(fields: [serviceId], references: [id])
}

model Notification {
  id              String           @id @default(uuid())
  userId          String?
  providerId      String?
  serviceownedId  String?         
  ticketId        Int?             @unique
  content         String
  read            Boolean          @default(false)

  user            User?            @relation(fields: [userId], references: [id])
  provider        ServiceProvider?  @relation("ProviderNotifications", fields: [providerId], references: [id]) 
  serviceOwner    ServiceProvider?  @relation("ServiceOwnerNotifications", fields: [serviceownedId], references: [id]) 
  ticket          Ticket?          @relation(fields: [ticketId], references: [id])
  createdAt       DateTime         @default(now())
}
